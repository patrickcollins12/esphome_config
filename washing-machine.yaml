substitutions:
  friendly_name: espvibration2

esphome:
  name: $friendly_name
  platform: ESP32
  board: featheresp32
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
logger:
api:
ota:
captive_portal:

text_sensor:
  # Send IP Address
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address

  # Send Uptime in raw seconds
  - platform: template
    name: $friendly_name Uptime
    id: uptime_human
    icon: mdi:clock-start
    update_interval: 60s

i2c:
  # defaults
  sda: 13
  scl: 15

# Sensors that the ESPhome unit is capable of reporting
sensor:
  - platform: wifi_signal
    name: $friendly_name WiFi Signal
    update_interval: 300s
  
  # https://esphome.io/components/sensor/bme280.html
  - platform: bme280
    temperature:
      name: "BME280 Temperature"
      id: bme280temp
      accuracy_decimals: 3
    pressure:
      name: "BME280 Pressure"
      accuracy_decimals: 3
      filters:
        - offset: 16.09
    humidity:
      name: "BME280 Humidity"
      id: bme280hum
      accuracy_decimals: 3
    address: 0x76
    update_interval: 60s

  # - platform: template
  #   name: "keepalive for sw420"
  #   internal: True
  #   lambda: |-
  #     id(sw420).publish_state(id(sw420).state);
  #     return 1;
  #   update_interval: 6s

  - platform: uptime
    internal: true
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            # Custom C++ code to generate the result
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();


color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

font:
  - file: "Helvetica.ttf"
    id: helvetica_48
    size: 48
    # glyphs:
    # - '째'
  - file: "Helvetica.ttf"
    id: helvetica_24
    size: 24
    # glyphs:
    # - '째'
  - file: "Helvetica.ttf"
    id: helvetica_12
    size: 12
    # glyphs:
    # - '째'

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1

# Enables the SW-420 Vibration Sensor
  - platform: gpio  
    name: $friendly_name Vibration Sensor
    id: sw420
    pin:
      number: GPIO32
      mode: INPUT
    device_class: vibration
    filters:
     - delayed_on: 10ms
     - delayed_off: 10min
    #  - delayed_off: 1sec

# We can still control the backlight independently
switch:
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight

# image:
#   - file: "image.png"
#     id: my_image
#     resize: 200x200
#     type: RGB24

time:
  - platform: homeassistant
    id: esptime

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 270
    lambda: |-

      // draw the two blue rectangles
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 30, it.get_width(), it.get_height(), id(my_blue));   // header bar

      // Uptime
      it.print(5, 5, id(helvetica_24), id(my_gray), TextAlign::TOP_LEFT, id(uptime_human).state.c_str());

      // Online / Offline
      if (id(system_status).state) {
        it.print(235, 5, id(helvetica_24), id(my_green), TextAlign::TOP_RIGHT, "Online" );
      }  else {
        it.print(235, 5, id(helvetica_24), id(my_red),   TextAlign::TOP_RIGHT, "Offline" );
      }

      // temp and humidity
      char buffer[64];
      snprintf(buffer, sizeof buffer, "%0.1f째C  %.0f%%", id(bme280temp).state, id(bme280hum).state  );
      it.print((240 / 2), (140 / 3) * 1 + 5, id(helvetica_24), id(my_gray), TextAlign::CENTER, buffer );

      // Running / Off
      char buffer2[64];
      snprintf(buffer2, sizeof buffer2, "%s", (id(sw420).state)?"Running":"Off"  );
      it.print((240 / 2), (140 / 3) * 2 + 5, id(helvetica_48), id(my_gray), TextAlign::CENTER, buffer2 );

