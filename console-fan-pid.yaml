substitutions:
  friendly_name: Console Fan (PID)

esphome:
  name: console-fan-pid
  

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:
api:
ota:
captive_portal:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "console-fan-ap"
    password: "O2YQivORnPXe"

    # Example configuration entry
text_sensor:
  - platform: homeassistant
    id: effect
    entity_id: light.led_strip
    attribute: effect
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address

  - platform: template
    name: $friendly_name Uptime
    id: uptime_human
    icon: mdi:clock-start

  ## RECEIVE kp,ki and kd parameters from input_text.kx in home assistant
  - platform: homeassistant
    id: ha_kp
    entity_id: input_text.kp
    on_value: 
      then:
        - lambda: |-
            ESP_LOGD("main", "kp was %f", id(console_pid_thermostat).get_kp());
            id(console_pid_thermostat).set_kp( std::atof(id(ha_kp).state.c_str() ) );
            ESP_LOGD("main", "kp now %f", id(console_pid_thermostat).get_kp());

  - platform: homeassistant
    id: ha_ki
    entity_id: input_text.ki
    on_value: 
      then:
        - lambda: |-
            ESP_LOGD("main", "ki was %f", id(console_pid_thermostat).get_ki());
            id(console_pid_thermostat).set_ki( std::atof(id(ha_ki).state.c_str()  ) );
            ESP_LOGD("main", "ki now %f", id(console_pid_thermostat).get_ki());

  - platform: homeassistant     
    id: ha_kd
    entity_id: input_text.kd
    on_value: 
      then:
        - lambda: |-
            ESP_LOGD("main", "kd was %f", id(console_pid_thermostat).get_kd());
            id(console_pid_thermostat).set_kd( std::atof(id(ha_kd).state.c_str() ) );
            ESP_LOGD("main", "kd now %f", id(console_pid_thermostat).get_kd());
          
# Send WiFi signal strength & uptime to HA
sensor:

  - platform: wifi_signal
    name: $friendly_name WiFi Strength
    update_interval: 60s

  - platform: uptime
    name: $friendly_name Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

########################################################
# START


  # GET TEMP
  - platform: dht
    pin: GPIO3
    temperature:
      name: "Temperature"
      id: console_fan_pid_temperature
      filters:
        # - sliding_window_moving_average:
        - max:
            window_size: 15
            send_every: 15
            send_first_at: 1
  
    humidity:
      name: "Humidity"
      id: console_fan_pid_humidity
    update_interval: 1.3s

  # SET FAN SPEED
  - platform: pid
    name: "Fan Speed (PWM Voltage)"
    type: COOL

  # TURN FAN ON/OFF
power_supply:
  - id: fan_power_supply
    pin: 33

output:
  # - platform: ledc
  #   pin: 14
  #   # min_power: 20%
  #   power_supply: fan_power_supply
  #   id: console_fan_speed

  - platform: ledc
    pin: 15
    frequency: "25000 Hz"
    # min_power: 15%
    max_power: 80%
    # power_supply: fan_power_supply
    id: console_fan_speed
    
  # # dummy heater
  - platform: ledc
    pin: 27
    frequency: "25000 Hz"
    id: console_heat_speed

fan:
  - platform: speed
    output: console_fan_speed
    name: "Console Fan Speed"

climate:
  - platform: pid
    name: "Console Fan (PID) Thermostat"
    id: console_pid_thermostat
    sensor: console_fan_pid_temperature
    default_target_temperature: 29°C
    cool_output: console_fan_speed
    # heat_output: console_heat_speed
    visual:
      min_temperature: 20 °C
      max_temperature: 50 °C

    # RUN3
    # control_parameters:
    #   kp: 1.52338
    #   ki: 0.00495
    #   kd: 175.85985

    # i figured these out
    # control_parameters:
    #   kp: 1.754
    #   ki: 0.00681
    #   kd: 30


    # i figured these out
    control_parameters:

      # at 1.0, 1degC delta would set fan to 100% difference. At 0.5, .5 degC would set fan to 100% difference and .25degC to 50%
      # lower gain is less likely to oscillate, more likely to under react to big changes and will create a bigger offset.
      # higher gain is more likely to oscillate, less likely to under react to big changes and not sure about offset.
      # kp: 0.9
      kp: 0.1 # much less aggressive and might slowly let 1.5c rack up before it hits 100%. Takes a good 10 minutes to close a .5c gap

      # 1/s where seconds is how long it should attempt to correct an offset. see table here https://blog.opticontrols.com/archives/344
      # ki: 0.0033 = 1/300 (5 minutes to correct an offset)
      # ki: 0.00333 
      ki: 0.0009 # close the gap very very slowly. like over 50 minutes?

      # not sure about this one. it seemed to do well on 30, but let's leave it at 0 for now
      kd: 0

switch:
  - platform: template
    name: "PID Climate Autotune"
    turn_on_action:
      - climate.pid.autotune: 
          id: console_pid_thermostat  
          noiseband: 0.25
          positive_output: 50%
          negative_output: -50%
  - platform: restart
    name: "Console Fan ESP32 Restart"
 


      # RUN1 
      # ----
      # PID Autotune finished!
      # PID Autotune:
      #   State: Succeeded!
      #   Oscillation Frequency is not symmetrical. PID parameters may be inaccurate!
      #     This is usually because the heat and cool processes do not change the temperature at the same rate.
      #     Please try reducing the positive_output value (or increase negative_output in case of a cooler)
      #   Calculated PID parameters ("Ziegler-Nichols PID" rule):
      
      #   control_parameters:
      #     kp: 2.54648
      #     ki: 0.03425
      #     kd: 47.33437
      
      #   Please copy these values into your YAML configuration! They will reset on the next reboot.
      #   Alternative Rules:
      #     Rule 'Ziegler-Nichols PI':
      #       kp: 1.90986, ki: 0.01541, kd: 0.00000
      #     Rule 'Pessen Integral PID':
      #       kp: 2.97089, ki: 0.04995, kd: 66.26812
      #     Rule 'Some Overshoot PID':
      #       kp: 1.41330, ki: 0.01904, kd: 70.05487
      #     Rule 'No Overshoot PID':
      #       kp: 0.84883, ki: 0.01142, kd: 39.44531

      # RUN2
      # ----
      #  PID Autotune finished!
      #  PID Autotune:
      #    State: Succeeded!
      #    Oscillation Frequency is not symmetrical. PID parameters may be inaccurate!
      #      This is usually because the heat and cool processes do not change the temperature at the same rate.
      #      Please try reducing the positive_output value (or increase negative_output in case of a cooler)
      #    Calculated PID parameters ("Ziegler-Nichols PID" rule):
        
      #    control_parameters:
      #      kp: 1.75400
      #      ki: 0.00681
      #      kd: 112.87010
        
      #    Please copy these values into your YAML configuration! They will reset on the next reboot.
      #    Alternative Rules:
      #      Rule 'Ziegler-Nichols PI':
      #        kp: 1.31550, ki: 0.00307, kd: 0.00000
      #      Rule 'Pessen Integral PID':
      #        kp: 2.04633, ki: 0.00994, kd: 158.01813
      #      Rule 'Some Overshoot PID':
      #        kp: 0.97347, ki: 0.00379, kd: 167.04776
      #      Rule 'No Overshoot PID':
      #        kp: 0.58467, ki: 0.00227, kd: 94.05842
      
      # RUN3 - with 50% cooling and 100% heating
      # PID Autotune finished!
      # PID Autotune:
      #   State: Succeeded!
      #   All checks passed!
      #   Calculated PID parameters ("Ziegler-Nichols PID" rule):
      
      #   control_parameters:
      #       kp: 1.52338, ki: 0.00495, kd: 175.85985
      #     Rule 'Some Overshoot PID':
      #       kp: 0.72469, ki: 0.00189, kd: 185.90898
      #     Rule 'No Overshoot PID':
      #       kp: 0.43525, ki: 0.00113, kd: 104.67848
